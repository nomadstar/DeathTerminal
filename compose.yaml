services: 

  # Bus Interface
  bus:
    image: jrgiadach/soabus:latest
    tty: true
    container_name: giadachbus

  # MonoGame container para el frontend tuneado
  frontend:
    build:
      context: ./frontiface
      dockerfile: monogame.dockerfile
    volumes:
      - ./frontiface/gamefiles:/usr/src/app # Cambia este directorio donde trabajes con el MonoGame
    tty: true
    container_name: MonoGameFrontend

  # Postgres Database
  db:
    image: postgres:latest
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: db
    ports:
      - "5432:5432"
    volumes:
      - './sql/init-scripts:/docker-entrypoint-initdb.d'  # Scripts de inicialización
      - postgres_data:/var/lib/postgresql/data           # Persistencia de datos gestionada
    tty: true
    container_name: postgresdb

  # servicio de información del usuario
  informacion_service:
    build: 
      context: ./informacion_service
      dockerfile: info.dockerfile
    environment:
      BUS_HOST: "giadachbus"
    tty: true
    container_name: informacion_service
    depends_on:
      - bus
    volumes:
      - ./informacion_service/logs:/app/logs
      - ./comunicacion_bus.py:/app/bus_conf.py

#servicio de prueba***+
  client:
    build:
      context: ./Client
      dockerfile: client.dockerfile
    environment:
      BUS_HOST: "giadachbus"
    tty: true
    container_name: client
    depends_on:
      - bus
    volumes:
      - ./comunicacion_bus.py:/app/bus_conf.py

  #servicio de autenticación
  gestion_usuarios:
    build:
      context: ./gestionusuario
      dockerfile: login.dockerfile
    environment:
      BUS_HOST: "giadachbus"
    tty: true
    container_name: gestion_usuarios
    depends_on:
      - bus
      - db_service
    volumes:
      - ./gestion_usuarios/logs:/app/logs
      - ./comunicacion_bus.py:/app/bus_conf.py

    #sistema de foro
  foro_service:
    build:
      context: ./foro_service
      dockerfile: foro.dockerfile
    environment:
      BUS_HOST: "giadachbus"
    tty: true
    container_name: foro_service
    depends_on:
      - bus
    volumes:
      - ./foro_service/logs:/app/logs
      - ./comunicacion_bus.py:/app/bus_conf.py

    #servicio de permisos
  permisos_service:
    build:
      context: ./permisos_service
      dockerfile: permisos.dockerfile
    environment:
      BUS_HOST: "giadachbus"
    tty: true
    container_name: permisos_service
    depends_on:
      - bus
      - gestion_usuarios
    volumes:
      - ./permisos_service/logs:/app/logs
      - ./comunicacion_bus.py:/app/bus_conf.py

    #servicio de Registro
  registro_service:
    build:
      context: ./registro_usuarios
      dockerfile: register.dockerfile
    environment:
      BUS_HOST: "giadachbus"
    tty: true
    container_name: registro_service
    depends_on:
      - bus
      - db_service
    volumes:
      - ./registro_usuario/logs:/app/logs
      - ./comunicacion_bus.py:/app/bus_conf.py

    #servicio de consulta a la base de datos
  db_service:
    build:
      context: ./db_service
      dockerfile: db.dockerfile
    environment:
      BUS_HOST: "giadachbus"
      POSTGRES_USER: "user"
      POSTGRES_PASSWORD: "password"
      POSTGRES_DB: "db"
    tty: true
    container_name: db_service
    depends_on:
      - bus
      - db
    volumes:
      - ./db_service/logs:/app/logs
      - ./comunicacion_bus.py:/app/bus_conf.py 
    
    #servicio de panel de administración
  admin_service:
    build:
      context: ./admin_service
      dockerfile: admin.dockerfile
    environment:
      BUS_HOST: "giadachbus"
    tty: true
    container_name: admin_service
    depends_on:
      - bus
      - db_service
    volumes:
      - ./admin_service/logs:/app/logs
      - ./comunicacion_bus.py:/app/bus_conf.py

    # Servicio de Eliminación y Penalización
  penalization_service:
    build:
      context: ./penalizacionService
      dockerfile: penalization.dockerfile
    environment:
      BUS_HOST: "giadachbus"
    tty: true
    container_name: penalization_service
    depends_on:
      - bus
      - admin_service
    volumes:
      - ./penalizacionService/logs:/app/logs
      - ./comunicacion_bus.py:/app/bus_conf.py

  # Servicio de Progreso
  progress_service:
    build:
      context: ./progress_Service
      dockerfile: progress.dockerfile
    environment:
      BUS_HOST: "giadachbus"  # Host del bus de servicios
    tty: true
    container_name: progress_service
    depends_on:
      - bus
    volumes:
      - ./ProgressService/logs:/app/logs # Logs de progreso
      - ./comunicacion_bus.py:/app/bus_conf.py

    # Servicio de Reinicio de Instancias
  instance_reset_service:
    build:
      context: ./reinicio_instanciaService
      dockerfile: instancereset.dockerfile
    environment:
      BUS_HOST: "giadachbus"  # Host del bus de servicios
      RESET_CONDITIONS: "true" # Condiciones que deben cumplirse para reiniciar
    tty: true
    container_name: instance_reset_service
    depends_on:
      - bus
    volumes:
      - ./InstanceResetService/logs:/app/logs # Logs de reinicios
      
  save_service:
    build:
      context: ./Servicio_de_guardado
      dockerfile: guardado.Dockerfile
    ports:
      - "5002:5002"  # Puerto que expondrá el contenedor
    environment:
      BUS_HOST: "giadachbus"
    tty: true
    container_name: save_service
    depends_on:
      - bus
      - db
    volumes:
      - ./Servicio_de_guardado/logs:/app/logs
      - ./comunicacion_bus.py:/app/bus_conf.py
  
  #servicio de salida rapida
  salida_rapida:
    build:
      context: ./salida_rapida
      dockerfile: salida_rapida.dockerfile
    environment:
      BUS_HOST: "giadachbus"
    tty: true
    container_name: salida_rapida
    depends_on:
      - bus
      - save_service
    volumes:
      - ./salida_rapida/logs:/app/logs
      - ./comunicacion_bus.py:/app/bus_conf.py
  
  Content-Gen:
    build:
      context: ./ContentGen
      dockerfile: Dockerfile
    environment:
      BUS_HOST: "giadachbus"
    tty: true
    container_name: ContentGen
    depends_on:
      - bus
    volumes:
      - ./comunicacion_bus.py:/app/bus_conf.py
    


# Volúmenes gestionados
volumes:
  postgres_data: {}
