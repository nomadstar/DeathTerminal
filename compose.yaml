
services:

# Bus Interface
  bus:
    image: jrgiadach/soabus:latest
    # pongale puerto!
    tty: true
    container_name: giadachbus

# MonoGame container para el frontend tuneado
  frontend:
    #build de monogame sacada de Monogame Image en readme.md
    build:
      context: ./frontiface
      dockerfile: monogame.dockerfile
    volumes:
      - ./frontiface/gamefiles:/usr/src/app #Cambia este directorio donde trabajes con el monoGame
     #pongale puerto!
    tty: true
    container_name: MonoGameFrontend

# Postgres Database
  db:
    image: postgres:latest
    environment:
      POSTGRES_USER: user                     # Usuario de la base de datos
      POSTGRES_PASSWORD: password             # Contraseña del usuario
      POSTGRES_DB: db                         # Nombre de la base de datos
    ports:
      - "5432:5432"                           # Mapea el puerto 5432 al anfitrión
    volumes:
      - './sql/data:/var/lib/postgresql/data'  # Persistencia de datos en sql/data
      - './sql/init-scripts:/docker-entrypoint-initdb.d'  # Scripts de inicialización
    tty: true
    container_name: postgresdb
#  volumes:  #si quisieramos que los datos percistan aunque se use docker stop o down
#  postgres_data: {}

# Python container para el backend
  backend:
    build: 
      context: ./pythonifacetemplate
      dockerfile: backpython.dockerfile
    
    # pongale puerto!
    tty: true
    container_name: cool-backend



# run in next order -> bus, frontend, backend, db    



